# ======================= #
# START
# ======================= #

# ======================= #
# BUILD SYSTEM
# ======================= #

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# ======================= #
# PROJECT
# ======================= #

[project]
name = "rgrader"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = []
authors = [
  { name = "OÄŸuz Altun", email = "oguz211@gmail.com" },
]
dependencies = [
  "click",
  "typer[all]",
  "rich",
  "pydantic",
  "pandas",
  "openpyxl",
  "python-dotenv"
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]


[project.urls]
Documentation = "https://github.com/unknown/rgrader#readme"
Issues = "https://github.com/unknown/rgrader/issues"
Source = "https://github.com/unknown/rgrader"

[project.scripts]
rgrader = "rgrader.cli:rgrader"




# ======================= #
# HATCH
# ======================= #


[tool.hatch.version]
path = "src/rgrader/__about__.py"

[tool.hatch.dirs.env]
virtual = ".hatch"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = [ "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/rgrader tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]


# ======================= #
# BLACK
# ======================= #

[tool.black]
target-version = ["py310"]
line-length = 120
skip-string-normalization = true


# ======================= #
# MYPY
# ======================= #

[tool.mypy]
strict=true
pretty=true
verbosity=10
mypy_path = ".;.hatch/rgrader/lib"
python_version = "3.10"
disallow_untyped_defs = true
disallow_incomplete_defs = true
show_error_codes = true
no_implicit_optional = true
disallow_dynamic_typing = true
exclude = ["scripts", "docs", "test"]

python_executable=".hatch/lint/bin/python"

# files=[backend/**/*.py, swarm/**/*.py]
warn_return_any = true
warn_unused_ignores = true
warn_unused_configs = true
ignore_missing_imports = false

# ======================= #
# COVERAGE
# ======================= #

[tool.coverage.run]
source_pkgs = ["rgrader", "tests"]
branch = true
parallel = true
omit = [
  "src/rgrader/__about__.py",
]

[tool.coverage.paths]
rgrader = ["src/rgrader", "*/rgrader/src/rgrader"]
tests = ["tests", "*/rgrader/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]


# ======================= #
# PYRIGHT
# ======================= #

[tool.pyright]
include = ["src"]
exclude = ["**/node_modules",
    "**/__pycache__",
    "src/experimental",
    "src/typestubs"
]
ignore = ["src/oldstuff"]
defineConstant = { DEBUG = true }
stubPath = "src/stubs"

reportMissingImports = false
reportMissingTypeStubs = false

pythonVersion = "3.10"
pythonPlatform = "Linux"
venvPath = "./.hatch"
venv = "lint"

# executionEnvironments = [
#   { root = "src/web", pythonVersion = "3.5", pythonPlatform = "Windows", extraPaths = [ "src/service_libs" ] },
#   { root = "src/sdk", pythonVersion = "3.0", extraPaths = [ "src/backend" ] },
#   { root = "src/tests", extraPaths = ["src/tests/e2e", "src/sdk" ]},
#   { root = "src" }
# ]


# ======================= #
# RUFF
# ======================= #

[tool.ruff]
target-version = "py310"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["rgrader"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]


# ======================= #
# END
# ======================= #
